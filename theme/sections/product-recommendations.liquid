
{%- capture flickity_options -%}
{
  "prevNextButtons": true,
  "pageDots": false,
  "wrapAround": false,
  "contain": true,
  "cellAlign": "center",
  "watchCSS": true,
  "dragThreshold": 8,
  "groupCells": true,
  "arrowShape": {"x0": 20, "x1": 60, "y1": 40, "x2": 60, "y2": 35, "x3": 25}
}
{%- endcapture -%}

{%- if section.settings.show_product_recommendations -%}
  <section class="Section Section--spacingNormal product-recommendations recs recs-1" data-product-id="{{ product.id }}" data-limit="4">
    <header class="SectionHeader SectionHeader--center">
      <div class="Container"> 
        <h3 class="SectionHeader__Heading Heading h3">You Might Also Like</h3>
      </div>
    </header>
    <div class="ProductListWrapper">
      <div class="ProductList ProductList--carousel Carousel" data-mobile-count="1" data-desktop-count="4" data-flickity-config='{{ flickity_options }}'>
      </div>
    </div>
    {%- if recommendations.products_count > 0 -%}
      <ul>
        {%- for product in recommendations.products -%}
{%comment%}<script type='application/json' class='bold-product-json'>{{ product | json }}</script>{%endcomment%}
        <li>
          <a href="{{ product.url }}">
            <img src="{{ product.featured_image | img_url: '300x300' }}" alt="{{ product.featured_image.alt }}" />
            <p>{{ product.title }}</p>
            <p><span class="money" data-product-id="{{ product.id }}">{{ product.price | money}}</span></p>
          </a>
        </li>
        {%- endfor -%}
        </ul>
    {%- else -%}
      <style>
        #shopify-section-{{ section.id }} {
          display: none;
        }
      </style>
    {%- endif -%}
  </div>
{%- endif -%}
<script>
  var collectionsJson = [
    {%- for collection in collections -%}
      { title: '{{ collection.title | escape }}', handle: '{{ collection.handle | escape }}' }{%- unless forloop.last -%},{%- endunless -%}
    {%- endfor -%}
  ];
</script>

<script>
var loadProductRecommendationsIntoSection = function loadProductRecommendationsIntoSection() {
  var product = JSON.parse(document.querySelector('[data-product-json]').innerText).product;
  var tags = product.tags;
  var collections = {};
  var apiBase = '/collections/';
  var apiEnd = 'products.json';//?_ab=0&_fd=0&_sc=1&key=e1ff7a42ab50426f070ae8b0706a99c8800fa68fe840cd3720ef69371a526ca6';

  function getCollections(allCollections, page) {
    return new Promise((resolve, reject) => {
      collectionsJson.forEach(function(collection,index) {
        allCollections[collection.title] = collection.handle;
      });
      resolve(allCollections);
    });
    /*return fetch(`/collections.json?page=${page}`).then(response => response.json()).then(data => {
      data.collections.forEach(function(collection, index){
        allCollections[collection.title] = collection.handle;
      });

      if (!(data.collections.length > 0))
        return allCollections;
      else
        return getCollections(allCollections, (page + 1));
    });*/
  }

  function filterTags(tag) {
    return tag.indexOf("".concat(this, "-pt-")) == 0;
  }

  var currentProduct = {
    id: product.id,
    sizes: tags.filter(filterTags, 'sizes'),
    colors: tags.filter(filterTags, 'colors'),
    style: tags.filter(filterTags, 'style'),
    vendor: product.vendor.toLowerCase(),
    type: product.type.toLowerCase()
  };

  function filterProducts(currentProduct, products) {
    var filteredProducts = products; 
    
    // eliminate current product
    filteredProducts = filteredProducts.filter(function(product) {
      return product.id != currentProduct.id;
    });

    // eliminate out of stock products
    filteredProducts = filteredProducts.filter(function(product) {
      return product.tags.includes('in-stock');
    });

    // if current product has only one size, filter recommended products by size
    if (currentProduct.sizes.length === 1) {
      filteredProducts = filteredProducts.filter(function(product) {
        return product.tags.includes(currentProduct.sizes[0]);
      });
    }

    console.log('Products remaining after filters: ' + filteredProducts.length);
    
    // continue filtering products
    filteredProducts.forEach(function(product, index) {
      var tags = product.tags;
      var attributes = {
        sizes: tags.filter(filterTags, 'sizes'),
        colors: tags.filter(filterTags, 'colors'),
        style: tags.filter(filterTags, 'style'),
        vendor: product.vendor.toLowerCase(),
        type: currentProduct.type
      }; 
      
      // starting score
      filteredProducts[index].score = 0;

      // if style matches, product score increments by 2
      if (currentProduct.style[0] === attributes.style[0]) {
        filteredProducts[index].score += 10;
      }
            
      // if vendor matches, product score increments by 2
      if (currentProduct.vendor === attributes.vendor) {
        filteredProducts[index].score += 6;
      }
      
      // if type matches, product score increments by 2
      if (currentProduct.type === attributes.type) {
        filteredProducts[index].score += 4;
      }
      
      // if all colors match, product score increments by 2
      if (currentProduct.colors.every(function(e) {
          return attributes.colors.includes(e);
        })) {
        filteredProducts[index].score += 2;
      }
      // if any colors match, product score increments by 1
      else if (currentProduct.colors.some(function(e) {
          return attributes.colors.includes(e);
        })) {
        filteredProducts[index].score += 1;
      }
      console.log("Product " + product.title + " score " + filteredProducts[index].score);
    });
    
    // sort filtered products by descending score
    filteredProducts.sort(function(a, b) {
      return a.score < b.score ? 1 : -1;
    });
    
    // return only first 4 products
    return filteredProducts.slice(0, 4);
  }

  function generateHTML(products) {
  	var $container = $('.ProductList');
  	jQuery.each(products,function(index, product) {
      var imgsrc = String(product.hasOwnProperty("featured_image") ? product.featured_image : product.images[0].src).replace('.jpg','_~~WIDTH~~.jpg').replace('.png','_~~WIDTH~~.png');
      var widths = [200,400,600,700,800,900,1000,1200];
      var sizeBar = getSizeBar(product);
      
      var srcset = '';
      widths.forEach(function(el) {
        srcset += (srcset == '' ? '' : ', ') + imgsrc.replace('~~WIDTH~~',el+'x') + ' ' + el + 'w';
      });
  		$container.append(
    	'<div class="Carousel__Cell"><div class="ProductItem Visible">\
        <div class="ProductItem__Wrapper">\
          <a href="/products/' + String(product.handle) + '" class="ProductItem__ImageWrapper">\
            <img class="ProductItem__Image" srcset="' + srcset + '" alt="' + String(product.title) + '" />\
          </a>\
          <div class="ProductItem__Info ProductItem__Info--center">\
            <p class="ProductItem__Vendor Heading h4">' + String(product.vendor) + '</p>\
            <h2 class="ProductItem__Title Heading h3"><a href="/products/' + String(product.handle) + '">' + String(product.title) + '</a></h2>\
            '+sizeBar+'\
            <div class="ProductItem__PriceList Heading"><span class="ProductItem__Price Price">$' + String(product.variants[0].price).replace('.00','') + '</span></div>\
          </div>\
        </div>'
        );
    });
    var $wrapper = $('.ProductListWrapper');
    //$wrapper.append($container);
    return $wrapper;
  }

  function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  function generateYmal(products) {
    var filteredProducts = filterProducts(currentProduct, products);
    console.log(filteredProducts.length + " recommended products");
    if (filteredProducts.length > 0) {
      // Look for an element with class 'product-recommendations'
      var productRecommendationsSection = document.querySelector(".product-recommendations");
      var $productList = generateHTML(filteredProducts);

      if (productRecommendationsSection === null) return;

      $productList.appendTo(productRecommendationsSection);
      $('#shopify-section-product-recommendations').show();
    } else {
      console.log("No recommended products");
    }
  }

  getCollections({}, 1)
  .then(collections => {
    console.log('Retrieved ' + Object.keys(collections).length + ' collections');
    console.log(collections);

    // Fetch products from the collection of the same type.
    var url = "".concat(apiBase, "/").concat(collections[product.type],"/").concat(apiEnd).replace("//","/");
    console.log("Retrieving collection " + url); 
    fetch(url)
    .then(function(res) {
      return res.json();
    }).then(function(productsFromSameTypeCollection) {
      console.log("Retrieved " + Object.keys(productsFromSameTypeCollection).length + " products");

      // Fetch products from the Shopify recommendation
      url = "/recommendations/products.json?product_id=".concat(product.id);
      console.log("Retrieving recommendations " + url);
      fetch(url)
      .then(res => res.json())
      .then(function(productsFromShopifyRecommendation) {
        console.log('Retrieved ' + Object.keys(productsFromShopifyRecommendation).length + ' products');

        var productStyle = currentProduct.style[0].split(":")[1];
        var relatedCollectionName = capitalizeFirstLetter(productStyle).concat(' ', product.type);

        // Fetch products from the related collection by style
        url = "".concat(apiBase, "/").concat(collections[relatedCollectionName],"/").concat(apiEnd).replace("//","/");
        fetch(url)
        .then(function(res) {
          return res.json();
        })
        .then(function(productsFromRelatedCollection) {
          console.log('Retrieved ' + Object.keys(productsFromRelatedCollection) + ' products');
          // Combine all products
          var products = productsFromSameTypeCollection.products.concat(productsFromShopifyRecommendation.products, productsFromRelatedCollection.products);

          console.log('Total products: ' + products.length);
          console.log(products);
          generateYmal(products);
        }).catch(function(error) {
          // Combine all products
          var products = productsFromSameTypeCollection.products.concat(productsFromShopifyRecommendation.products);
          generateYmal(products);
        })
      }).catch(function(error) {
        console.log(error);
        var products = productsFromSameTypeCollection.products;

        generateYmal(products);
      });
    }).catch(error => console.log(error));
  })
  .catch(error => console.log(error));

  function getSizeBar(product) { 
    var tags = product.tags;
    // Shopify recommendation API returns product type as type other than product_type
    var downcase_type = product.hasOwnProperty("product_type") ? product.product_type.toLowerCase() : product.type.toLowerCase();
    var res = '';
    // WARNING: Any changes in the below logic must also be duplicated in snippets/product-item.liquid
    res += '<div class="ProductItem__SizeList">';
    if (tags.indexOf('size-one-size') >= 0) {
      res += '<span class="size-one-size">ONE SIZE</span>';
    } else if (downcase_type == 'baby') {
      res += '<span class="size-6m ' + (tags.indexOf('sizes-pt-6m') >= 0 ? '' : 'disabled') + '">6M</span>';
      res += '<span class="size-9m ' + (tags.indexOf('sizes-pt-9m') >= 0 ? '' : 'disabled') + '">9M</span>';
      res += '<span class="size-12m ' + (tags.indexOf('sizes-pt-12m') >= 0 ? '' : 'disabled') + '">12M</span>';
      res += '<span class="size-18m ' + (tags.indexOf('sizes-pt-18m') >= 0 ? '' : 'disabled') + '">18M</span>';
    } else if (downcase_type == 'childrens' && (tags.indexOf('bloomers') >= 0 || tags.indexOf('kids-subtype-pt-bloomer') >= 0)) {
      res += '<span class="size-1t ' + (tags.indexOf('sizes-pt-1t') >= 0 ? '' : 'disabled') + '">1T</span>';
      res += '<span class="size-2t ' + (tags.indexOf('sizes-pt-2t') >= 0 ? '' : 'disabled') + '">2T</span>';
      res += '<span class="size-3t ' + (tags.indexOf('sizes-pt-3t') >= 0 ? '' : 'disabled') + '">3T</span>';
    } else if (downcase_type == 'childrens' && (tags.indexOf('girasol') >= 0 || tags.indexOf('kids-subtype-pt-girasol') >= 0 || tags.indexOf('kids-luisa-dress') >= 0)) {
      res += '<span class="size-1t ' + (tags.indexOf('sizes-pt-1t') >= 0 ? '' : 'disabled') + '">1T</span>';
      res += '<span class="size-2t ' + (tags.indexOf('sizes-pt-2t') >= 0 ? '' : 'disabled') + '">2T</span>';
      res += '<span class="size-3t ' + (tags.indexOf('sizes-pt-3t') >= 0 ? '' : 'disabled') + '">3T</span>';
      res += '<span class="size-4t ' + (tags.indexOf('sizes-pt-4t') >= 0 ? '' : 'disabled') + '">4T</span>';
    } else if (downcase_type == 'childrens' && (tags.indexOf('florecita') >= 0 || tags.indexOf('kids-subtype-pt-florecita') >= 0)) {
      res += '<span class="size-4t ' + (tags.indexOf('sizes-pt-4t') >= 0 ? '' : 'disabled') + '">4T</span>';
      res += '<span class="size-6y ' + (tags.indexOf('sizes-pt-6y') >= 0 ? '' : 'disabled') + '">6Y</span>';
      res += '<span class="size-8y ' + (tags.indexOf('sizes-pt-8y') >= 0 ? '' : 'disabled') + '">8Y</span>';
      res += '<span class="size-10y ' + (tags.indexOf('sizes-pt-10y') >= 0 ? '' : 'disabled') + '">10Y</span>';
      res += '<span class="size-12y ' + (tags.indexOf('sizes-pt-12y') >= 0 ? '' : 'disabled') + '">12Y</span>';
    } else if (downcase_type == 'kids t-shirt') {
      res += '<span class="size-4t ' + (tags.indexOf('sizes-pt-4t') >= 0 ? '' : 'disabled') + '">4T</span>';
      res += '<span class="size-6y ' + (tags.indexOf('sizes-pt-6y') >= 0 ? '' : 'disabled') + '">6Y</span>';
      res += '<span class="size-8y ' + (tags.indexOf('sizes-pt-8y') >= 0 ? '' : 'disabled') + '">8Y</span>';
      res += '<span class="size-10y ' + (tags.indexOf('sizes-pt-10y') >= 0 ? '' : 'disabled') + '">10Y</span>';
      res += '<span class="size-12y ' + (tags.indexOf('sizes-pt-12y') >= 0 ? '' : 'disabled') + '">12Y</span>';
    } else if (downcase_type.indexOf('plus size') >= 0) {
      res += '<span class="size-1x ' + (tags.indexOf('sizes-pt-1x') >= 0 ? '' : 'disabled') + '">1X</span>';
      res += '<span class="size-2x ' + (tags.indexOf('sizes-pt-2x') >= 0 ? '' : 'disabled') + '">2X</span>';
    } else {
      res += '<span class="size-xs ' + (tags.indexOf('sizes-pt-extra-small') >= 0 ? '' : 'disabled') + '">XS</span>';
      res += '<span class="size-s ' + (tags.indexOf('sizes-pt-small') >= 0 ? '' : 'disabled') + '">S</span>';
      res += '<span class="size-m ' + (tags.indexOf('sizes-pt-medium') >= 0 ? '' : 'disabled') + '">M</span>';
      res += '<span class="size-l ' + (tags.indexOf('sizes-pt-large') >= 0 ? '' : 'disabled') + '">L</span>';
      res += '<span class="size-xl ' + (tags.indexOf('sizes-pt-extra-large') >= 0 ? '' : 'disabled') + '">XL</span>';
    }
    res += '</div>'
    return res;
  }

};

// If your section has theme settings, the theme editor
// reloads the section as you edit those settings. When that happens, the
// recommendations need to be fetched again.
// See https://help.shopify.com/en/themes/development/sections/integration-with-theme-editor
document.addEventListener("shopify:section:load", function(event) {
  if (event.detail.sectionId === "product-recommendations") {
    loadProductRecommendationsIntoSection();
  }
});

// Fetching the recommendations on page load
loadProductRecommendationsIntoSection();
</script>

{% schema %}

{
  "name": "Product recommendations",
  "class": "shopify-section--bordered",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_product_recommendations",
      "label": "Show dynamic recommendations?",
      "info": "Dynamic recommendations change and improve with time. [Learn more](https://help.shopify.com/en/themes/development/recommended-products)",
      "default": true
    }
  ]
}

{% endschema %}


